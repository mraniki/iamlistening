[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.poetry]
name = "iamlistening"
version = "4.2.15"
description = "A python package to interact with messaging platform."
authors = ["mraniki <8766259+mraniki@users.noreply.github.com>"]
license = "MIT License"
readme = "README.md"
keywords = [
    "bot","messaging",
    "discord", "telegram","matrix",
    ]
packages = [
    {include = "iamlistening"}
]

[tool.poetry.urls]
"Changelog" =  "https://github.com/mraniki/iamlistening/blob/dev/CHANGELOG.rst"
"Support" =  "https://github.com/mraniki/iamlistening/discussions"
"Issues" =  "https://github.com/mraniki/iamlistening/issues"


[tool.poetry.dependencies]
python = "^3.10"
dynaconf = ">=3.1.12"
loguru = ">=0.6.0"
telethon= "1.31.0"
py-cord= "2.4.1"
simplematrixbotlib= "2.10.1"
rocketchat-API= "1.30.0"
"Mastodon.py" = "1.8.1"
beautifulsoup4 = "4.12.2"
"guilded.py" = "1.11.0"
"revolt.py" = "0.1.11"
pythorhead = {version ="0.15.6", python = ">=3.10,<3.12"}
twitchio = "2.8.2"

[tool.poetry.group.dev.dependencies]
python-semantic-release = ">=8.0.8"
ruff = "^0.0.292"
black = "^23.3.0"
pre-commit = "^3.3.1"


[tool.ruff]
select = [
  "E",  # pycodestyle
  "F",  # pyflakes
  "I",  # isort
  "W"
]
exclude = [
  ".github/*",
]
fixable = ["ALL"]


[tool.pylint.exceptions]
overgeneral-exceptions = [
    "builtins.BaseException",
    "builtins.Exception",
    "builtins.RuntimeError",
]



















[tool.poetry.group.test.dependencies]
pytest = "^7.0"
pytest-cov = "^4.1"
pytest-asyncio = "^0.21.1"
pytest-mock = "^3.11.1"
pytest-loguru = "^0.3.0"



















[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "7.2.6"
pydata-sphinx-theme = "^0.14.0"
sphinx-hoverxref = "^1.3.0"
sphinx_copybutton = "0.5.2"
myst_parser = "^2.0.0"
sphinx_design = "^0.5.0"


[tool.pytest.ini_options]
pythonpath = "."
testpaths = "tests"
python_classes = "Test*"
log_format = "%(asctime)s - %(levelname)s - %(name)s - %(message)s"
log_level = "DEBUG"
filterwarnings = [
    " ignore:.*U.*mode is deprecated:DeprecationWarning",
    "ignore::DeprecationWarning",
]
addopts = """
-v
--show-capture=stderr
"""

[tool.coverage.run]
omit = [
    "tests/*",
    "examples/*",
    "docs/*",
    "*/config.py"
]

[tool.bandit]
exclude_dirs = ["tests","docs"]
skips = ["B101","B104"]

[tool.semantic_release]
upload_to_vcs_release = true
version_variables = ["iamlistening/__init__.py:__version__"]
build_command = "pip install poetry && poetry build"
commit_parser = "emoji"
version_toml = [
   "pyproject.toml:tool.poetry.version",
   ]


[tool.semantic_release.commit_parser_options]
major_tags = [
    "BREAKING",
    "💥",
    ":boom:",
  ]
minor_tags = ["feat",
    "🥚",":egg:",
    "🚀",":rocket:",
    "💄",":lipstick:",
    "✨",":sparkles:",
]

patch_tags = ["fix","bump","Update",
    "🎨",":art:",
    "🐛",":bug:",
    "🚑",":ambulance:",
    "⚡",":zap:",
    "🔥",":fire:",
    "🚨",":rotating_light:",
    "♻️",":recycle:",
    "🔧",":wrench:",
    "⬆️",":arrow_up:",
    "🩹",":adhesive_bandage:",
    "👷",":construction_worker:",
    "📝",":memo:",
    "🔒",":lock:",
    "👽",":alien:",
    "💬",":speech_balloon:",
    "🥅",":goal_net:",
    "✅",":white_check_mark:",
    "🐳",":whale:",
    "🙈",":see_no_evil:",
    "⚗️",":alembic:",
    "🧐",":monocle_face:",
    "🔇",":mute:",
    "🔊",":loud:",
]
